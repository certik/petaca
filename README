If using the Intel Compiler ...
-------------------------------

The cmake configuration automatically uses the -standard-semantics compiler
flag for the Debug and Release build types.  If you use a different build
type you will need to add this flag yourself.  The default behavior of the
compiler is to use non-standard semantics (pre-F2003) and this will break
some parts of the library that rely on the modern standard.

There is an optimization bug in the current version (14.0.2) and earlier
that is not exposed by the library itself, but may likely be exposed by
application code that uses the fortran_dynamic_linking module (see the
test_fortran_dynamic_linking.F90 unit test, as an example).  The type of
construct that triggers the bug is as follows

  abstract interface
    real function f(x)
      real, value :: x  ! the value attribute is the likely culprit
    end function
  end interface
  procedure(f), pointer :: fptr
  
  type(shlib) :: libm
  type(c_funptr)  :: funptr

  call libm%open ('libm.so', RTLD_NOW)
  call libm%func ('cbrtf', funptr)  ! cube root function
  call c_f_procpointer (funptr, fptr)
  ! A call to fptr() is not set-up properly; e.g., fptr(8.0) /= 2.0

The solution is to disable optimization for the the file (-O0), or
to compile without -standard-semantics.
